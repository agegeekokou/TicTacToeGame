@model TicTacToeGame.Models.Score


@{
    ViewData["Title"] = "Home Page";
}

<body style="margin:0;"> 
    <div class="container mt-5" style="background-color: lightblue; min-height: 53vh;">
        <div class="text-center pt-5">
            <h2>Tic Tac Toe Game</h2>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <button class="p-2" id="resetButton">Reset Game</button>
        </div>
        <div class="d-flex flex-column align-items-center mt-3">
            <div id="scorePlayerX">0</div>
            <div id="scorePlayerO">0</div>
        </div>
        <div id="board" class="mt-3">
       
        </div>   
        <div class="d-flex justify-content-center mt-3">
            <button id="pvpButton" onclick="selectMode('PlayerVsPlayer')">Player vs Player</button>
            <button id="pvcButton" onclick="selectMode('PlayerVsComputer')">Player vs Computer</button>
        </div>
    </div>
</body>


@section Scripts{   
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const boardContainer = document.getElementById("board");
            let currentPlayer = 'X';

            // Load sound effects
            const moveSound = new Audio('/sounds/move.mp3');
            const winSound = new Audio('/sounds/win.mp3');
            const drawSound = new Audio('/sounds/draw.mp3');
            const resetSound = new Audio('/sounds/reset.mp3');

            // Play move sound when a player makes a move
            function playMoveSound() {
                moveSound.play();
            }

            // Play win sound
            function playWinSound() {
                winSound.play();
            }

            // Play draw sound
            function playDrawSound() {
                drawSound.play();
            }

            // Play reset sound
            function playResetSound() {
                resetSound.play();
            }

           
            let mode = "PlayerVsPlayer"; // Default mode

            document.getElementById("pvpButton").addEventListener("click", () => {
                mode = "PlayerVsPlayer";
                selectMode(mode);
                resetGame(); // Reset the board

                //makeMove();
            });

            document.getElementById("pvcButton").addEventListener("click", () => {
                mode = "PlayerVsComputer";
                selectMode(mode);
                
                resetGame();
                //makeMove();
                // setTimeout(() => {
                //     makeMove(); // Indicate no move for the player; let the server decide
                // }, 500); // Allow slight delay for clarity
            });

            function initGame() {
                fetch("/api/game/init", { 
                    method: "POST",
                     headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    playResetSound();
                    currentPlayer = data.currentPlayer;
                    board = data.board;
                    score = data.score;
                    console.log("Response from server:", data);
                    renderBoard(data.board);
                    renderScores(data.score); // Bind the scores
                                  
                    console.log("data.score:", data.score);
                });
            }

            // const moveRequest = {
            //     row: Row,
            //     col: Col,
            //     playerVsPlayer: mode === "PlayerVsPlayer",
            //     playerVsComputer: mode === "PlayerVsComputer"
            // };
            let isProcessingMove = false;

            function makeMove(row, col) {
                if (isProcessingMove) return; // Block duplicate requests
                isProcessingMove = true;

                const bodyData = {
                    row: row ?? null,
                    col: col ?? null,
                    player: currentPlayer,
                    playerVsComputer: mode === "PlayerVsComputer",
                    playerVsPlayer: mode === "PlayerVsPlayer"
                };
                console.log("Sending request to backend:", bodyData);

                fetch("/api/game/move", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(bodyData)
                })
                //.then((response) => response.json())
                .then((response) => {
                    if (!response.ok) {
                        console.error("Failed request:", response);
                        return response.text().then((text) => {
                            console.error("Error response from server:", text);
                            throw new Error(text);
                        });
                    }
                    return response.json();
                })
                .then((data) => {
                    console.log("Response from server:", data);

                    renderBoard(data.board);
                    renderScores(data.score);

                    if (data.isWin || data.isWinPlayer) {
                        playWinSound();
                        highlightWinningCells(data.winningCells);
                        highlightWinningCells(data.winningCellsPlayer);
                        setTimeout(() => {
                            alert(`${currentPlayer} wins!`);
                            resetGame();
                        }, 1000);
                    } else if (data.isDraw || data.isDrawPlayer) {
                        playDrawSound();
                        alert("It's a draw!");
                        resetGame();
                    } else {
                        // Handle computer's move after player's move
                        if (mode === "PlayerVsComputer" && currentPlayer === "X") {
                            makeMove(row, col);
                            playMoveSound();
                            // Switch to computer's turn
                            currentPlayer = currentPlayer === "X" ? "O" : "X";
                            //currentPlayer = data.currentPlayer;
                        if(mode === "PlayerVsComputer" && currentPlayer === "O"){
                              setTimeout(() => {
                                makeMove(row, col); // Call makeMove without row and col for the computer 
                                playMoveSound();
                            }, 1000); // Add a slight delay for clarity
                            playMoveSound();
                        }                          
                        } else {
                            currentPlayer = currentPlayer === "X" ? "O" : "X";
                            //currentPlayer = data.currentPlayer;
                            playMoveSound();
                        }
                    }
                })
                .catch((error) => console.error("Error during move:", error))
                .finally(() => {
                    isProcessingMove = false; // Allow the next move
                });
            }


            // function makeMove(row, col) {
            //     if (mode === "PlayerVsComputer") {
            //         if (typeof row === "undefined" || typeof col === "undefined") {
            //             console.error("Invalid move coordinates:", { row, col });
            //             //return; // Prevent sending an invalid request
            //         }

            //         fetch("/api/game/move", {
            //             method: "POST",
            //             headers: { "Content-Type": "application/json" },
            //             body: JSON.stringify(
            //             {
            //                 row: row,
            //                 col: col,
            //                 player: currentPlayer,
            //                 playerVsComputer: mode === "PlayerVsComputer",
            //                 playerVsPlayer: mode === "PlayerVsPlayer"
            //             })
                //     })
                //     .then(response => response.json())
                //     .then(data => {
                //         console.log("Computer move response:", data);
                //         const { row, col } = data; // Assuming the server sends the computer's move
                //         makeMove(row, col); // Use the computer's move coordinates

                //         renderBoard(data.board);
                //         renderScores(data.score);
                //     });
                // }

                // fetch("/api/game/move", {
                //     method: "POST",
                //     headers: {
                //         "Content-Type": "application/json"
                //     },
                //     body: JSON.stringify(
                //     {
                //         row: row,
                //         col: col,
                //         player: currentPlayer,
                //         playerVsComputer: mode === "PlayerVsComputer",
                //         playerVsPlayer: mode === "PlayerVsPlayer"
                //     })
                // })
                // .then((response) => response.json())
                // .then((data) => {
                //     renderBoard(data.board);
                //     renderScores(data.score);

                //     console.log("Response from server:", data); 
                //     console.log("Winning cells:", data.winningCells);
                //     console.log('Current player:', data.currentPlayer);
                //     console.log("Sending move request:", { row, col, playerVsComputer: mode === "PlayerVsComputer" });


                //     if (data.isWin) {
                //         playWinSound();
                //         Highlight winning cells
                //         highlightWinningCells(data.winningCells);
               
            //             setTimeout(() => {
            //                 alert(`${currentPlayer} wins!`);
            //                 resetGame();
            //             }, 1000); // Delay for animation
            //         } else if (data.isDraw) {
            //             playDrawSound();
            //             alert("It's a draw!");
            //             resetGame();
            //         } else {
            //             currentPlayer = currentPlayer === "X" ? "O" : "X";
            //             playMoveSound();
            //         }
            //     });
            // }

            function highlightWinningCells(winningCells) {
                if (!Array.isArray(winningCells) || winningCells.length === 0) {
                    console.error("Invalid or empty winningCells array:", winningCells);
                    return;
                }

                winningCells.forEach((cell) => {
                    // Extract row and col from the object
                    const { row, col } = cell;
                    if (row === undefined || col === undefined) {
                        console.error("Invalid cell object:", cell);
                        return;
                    }

                    // Select the corresponding button
                    const button = document.querySelector(
                        `#board > div:nth-child(${row + 1}) > button:nth-child(${col + 1})`
                    );

                    if (button) {
                        button.classList.add("winner");
                    } else {
                        console.error("Button not found for row:", row, "col:", col);
                    }
                });
            }

            function selectMode(mode) {
                // Get the buttons
                const pvpButton = document.getElementById("pvpButton");
                const pvcButton = document.getElementById("pvcButton");

                // Remove 'selected' class from both buttons
                pvpButton.classList.remove("selected");
                pvcButton.classList.remove("selected");

                // Add 'selected' class to the clicked button
                if (mode === "PlayerVsPlayer") {
                    pvpButton.classList.add("selected");
                } else if (mode === "PlayerVsComputer") {
                    pvcButton.classList.add("selected");
                }

                // Update the game mode (if needed)
                //gameMode = mode; // Ensure this matches your existing game logic
            }



            function resetGame() {
                fetch("/api/game/reset", 
                { 
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(() => initGame());
            }

            function renderBoard(board) {
                const boardContainer = document.getElementById("board");
                boardContainer.innerHTML = ""; // Clear existing board content

                for (let row = 0; row < 3; row++) {
                    const rowDiv = document.createElement("div"); // Create a div for each row
                    rowDiv.classList.add("d-flex", "justify-content-center"); // Add any required Bootstrap classes

                    for (let col = 0; col < 3; col++) {
                        const cell = document.createElement("button");
                        cell.classList.add("p-3", "cell"); // Style each cell as needed
                        cell.innerText = board[row][col] || ""; // Display "X" or "O" if present, or leave blank
                        cell.classList.toggle("disabled", board[row][col] !== null); // Disable occupied cells

                        // // Check if board[row] exists before accessing board[row][col]
                        // const cellValue = (board[row] && board[row][col]) ? board[row][col] : "";
                        // cell.innerText = cellValue;

                        //cell.addEventListener("click", () => makeMove(row, col)); // Attach click event to handle move
                        cell.addEventListener("click", () => {
                            if(mode === "PlayerVsComputer" && currentPlayer === "X"){
                                makeMove(row, col);
                                console.log(`Calling makeMove with row: ${row}, col: ${col}`);
                                console.log(`Current Player: ${currentPlayer}`);
                                playMoveSound();
                            }

                            if (mode === "PlayerVsComputer" && currentPlayer === "O") {
                                console.log("It's the computer's turn. Ignoring clicks.");
                                console.log(`Current Player: ${currentPlayer}`);

                                makeMove(row, col);
                                playMoveSound();
                                return; // Block clicks during the computer's turn
                            }

                            if (mode === "PlayerVsPlayer" || board[row][col] === "") { // Ensure valid moves only
                                makeMove(row, col);
                            } else {
                                console.warn("Invalid move: cell already occupied");
                            }
                        });
                        //&& currentPlayer === "O"
                        // cell.addEventListener("click", () => {
                        //     if (mode !== "PlayerVsComputer" || board[row][col] === "") {
                        //         makeMove(row, col); // Prevent invalid moves
                        //     }
                        // });

                        rowDiv.appendChild(cell); // Append each cell to the current row
                    }

                    boardContainer.appendChild(rowDiv); // Append each row to the board container
                }
                console.log(board);
            }

            function renderScores(score) {
                if (score) {
                    document.getElementById('scorePlayerX').innerText = `Score Player-X: ${score.playerX}`; 
                    document.getElementById('scorePlayerO').innerText = `Score Player-O: ${score.playerO}`;
                } else {
                    console.error("Score data is missing or undefined:", score);
                }
            }

            //document.getElementById("resetButton").addEventListener("click", resetGame);

            document.getElementById("resetButton").addEventListener("click", () => {
                playResetSound(); // Play reset sound
                resetGame();
            });

            initGame();
        });
    </script>
}
