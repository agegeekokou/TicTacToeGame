@model TicTacToeGame.Models.Score

@{
    ViewData["Title"] = "Home Page";
}

<body style="margin:0;"> 
    <div class="container mt-5" style="background-color: lightblue; min-height: 53vh;">
        <div class="text-center pt-3">
            <h2>Tic Tac Toe Game</h2>
        </div>
        <div class="d-flex justify-content-center mt-5">
            <button class="p-2" id="resetButton">Reset Game</button>
        </div>
        <div class="d-flex flex-column align-items-center mt-5">
            <div id="scorePlayerX">0</div>
            <div id="scorePlayerO">0</div>
        </div>
        <div id="board" class="mt-5">
       
        </div>   
    </div>
</body>


@section Scripts{   
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const boardContainer = document.getElementById("board");
            let currentPlayer = 'X';

            // Load sound effects
            const moveSound = new Audio('/sounds/move.mp3');
            const winSound = new Audio('/sounds/win.mp3');
            const drawSound = new Audio('/sounds/draw.mp3');
            const resetSound = new Audio('/sounds/reset.mp3');

            // Play move sound when a player makes a move
            function playMoveSound() {
                moveSound.play();
            }

            // Play win sound
            function playWinSound() {
                winSound.play();
            }

            // Play draw sound
            function playDrawSound() {
                drawSound.play();
            }

            // Play reset sound
            function playResetSound() {
                resetSound.play();
            }

            // function confetti() {

            // }

            function initGame() {
                fetch("/api/game/init", { 
                    method: "POST",
                     headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    playResetSound();
                    currentPlayer = data.currentPlayer;
                    board = data.board;
                    score = data.score;
                    console.log("Response from server:", data);
                    renderBoard(data.board);
                    renderScores(data.score); // Bind the scores
                                  
                    console.log("data.score:", data.score);
                });
            }

            function makeMove(row, col) {
                fetch("/api/game/move", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ row, col, player: currentPlayer }),
                })
                .then((response) => response.json())
                .then((data) => {
                    renderBoard(data.board);
                    renderScores(data.score);

                    console.log("Response from server:", data); 
                    console.log("Winning cells:", data.winningCells);

                    if (data.isWin) {
                        playWinSound();
                        // Highlight winning cells
                        highlightWinningCells(data.winningCells);

                        // Trigger confetti animation
                        console.log("Launching confetti animation!");
                        confetti({
                            particleCount: 100, // Number of confetti pieces
                            spread: 70,         // Spread angle of confetti
                            origin: { x: 0.5, y: 0.5 }, // Launch from the center
                            colors: ['#bb0000', '#ffffff', '#00bb00'] // Custom colors
                        });

                         alert(`${currentPlayer} wins!`);
                         resetGame();
               
                        // setTimeout(() => {
                        //     alert(`${currentPlayer} wins!`);
                        //     resetGame();
                        // }, 1000); // Delay for animation
                    } else if (data.isDraw) {
                        playDrawSound();
                        alert("It's a draw!");
                        resetGame();
                    } else {
                        currentPlayer = currentPlayer === "X" ? "O" : "X";
                        playMoveSound();
                    }
                });
            }

            function highlightWinningCells(winningCells) {
                if (!Array.isArray(winningCells) || winningCells.length === 0) {
                    console.error("Invalid or empty winningCells array:", winningCells);
                    return;
                }

                winningCells.forEach((cell) => {
                    // Extract row and col from the object
                    const { row, col } = cell;
                    if (row === undefined || col === undefined) {
                        console.error("Invalid cell object:", cell);
                        return;
                    }

                    // Select the corresponding button
                    const button = document.querySelector(
                        `#board > div:nth-child(${row + 1}) > button:nth-child(${col + 1})`
                    );

                    if (button) {
                        button.classList.add("winner");
                    } else {
                        console.error("Button not found for row:", row, "col:", col);
                    }
                });
            }


            function resetGame() {
                fetch("/api/game/reset", 
                { 
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(() => initGame());
            }

            function renderBoard(board) {
                const boardContainer = document.getElementById("board");
                boardContainer.innerHTML = ""; // Clear existing board content

                for (let row = 0; row < 3; row++) {
                    const rowDiv = document.createElement("div"); // Create a div for each row
                    rowDiv.classList.add("d-flex", "justify-content-center"); // Add any required Bootstrap classes

                    for (let col = 0; col < 3; col++) {
                        const cell = document.createElement("button");
                        cell.classList.add("p-3", "cell"); // Style each cell as needed
                        cell.innerText = board[row][col] || ""; // Display "X" or "O" if present, or leave blank

                        cell.addEventListener("click", () => makeMove(row, col)); // Attach click event to handle move
                        rowDiv.appendChild(cell); // Append each cell to the current row
                    }

                    boardContainer.appendChild(rowDiv); // Append each row to the board container
                }
                console.log(board);
            }

            function renderScores(score) {
                if (score) {
                    document.getElementById('scorePlayerX').innerText = `Score Player-X: ${score.playerX}`; 
                    document.getElementById('scorePlayerO').innerText = `Score Player-O: ${score.playerO}`;
                } else {
                    console.error("Score data is missing or undefined:", score);
                }
            }

            //document.getElementById("resetButton").addEventListener("click", resetGame);

            document.getElementById("resetButton").addEventListener("click", () => {
                playResetSound(); // Play reset sound
                resetGame();
            });

            initGame();
        });
    </script>
}
